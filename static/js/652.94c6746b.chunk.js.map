{"version":3,"file":"static/js/652.94c6746b.chunk.js","mappings":"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","sources":["webpack://portfolio/./src/Pages/login/index.module.css?4cbc","webpack://portfolio/./src/Components/registration/index.module.css?5314","Components/registration/Registration.jsx","Pages/login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"login_loginPage__sAMCq\",\"loginPageDark\":\"login_loginPageDark__NMaJN\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"registration_container__GLdY+\",\"containerDark\":\"registration_containerDark__IVG8f\",\"formError\":\"registration_formError__RYnee\",\"buttonLogReg\":\"registration_buttonLogReg__xFPx9\",\"switchText\":\"registration_switchText__DSSsu\",\"switchLink\":\"registration_switchLink__ZkUWY\"};","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useUser } from '../../app/context';\nimport styles from './index.module.css';\n\nconst Registration = () => {\n    const navigate = useNavigate();\n    const { setFavoritesMoviesIds, setUser, setAuthorized, isDarkTheme } = useUser();\n\n    const [isDisabled, setIsDisabled] = useState(false);\n    const [isRegistered, setIsRegistered] = useState(true);\n    const [formData, setFormData] = useState({\n        login: '',\n        password: '',\n        confirmPassword: '',\n    });\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const savedUser = JSON.parse(localStorage.getItem('current-user'));\n        if (savedUser && savedUser.isAuthorized) {\n            setUser(savedUser.login);\n            setAuthorized(true);\n            setIsDisabled(true);\n            navigate('/home', { replace: true });\n        }\n    }, [setUser, setAuthorized, navigate]);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setFormData((prev) => ({\n            ...prev,\n            [name]: value,\n        }));\n    };\n\n    const resetForm = () => {\n        setFormData({ login: '', password: '', confirmPassword: '' });\n        setError('');\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setError('');\n\n        const storedData = JSON.parse(localStorage.getItem('moviPortal')) || { users: [] };\n        const { users } = storedData;\n\n        if (!isRegistered) {\n            // Регистрация\n            if (formData.password.length < 8 || formData.login.length < 8) {\n                setError('Login and Password must be at least 8 characters long');\n                return;\n            }\n            if (formData.password !== formData.confirmPassword) {\n                setError('Passwords do not match');\n                return;\n            }\n\n            const userExists = users.some((user) => user.login === formData.login);\n            if (userExists) {\n                setError('User already exists');\n                return;\n            }\n\n            const newUser = {\n                login: formData.login,\n                password: formData.password,\n                isAuthorized: false,\n                favoritesMoviesIds: [],\n            };\n            storedData.users.push(newUser);\n            localStorage.setItem('moviPortal', JSON.stringify(storedData));\n            setIsRegistered(true);\n            resetForm();\n            return;\n        }\n\n        // Логин\n        const user = users.find((u) => u.login === formData.login);\n        if (!user) {\n            setError('User not found');\n            return;\n        }\n        if (user.password !== formData.password) {\n            setError('Invalid password');\n            return;\n        }\n\n        const updatedUsers = users.map((u) =>\n            u.login === user.login\n                ? { ...u, isAuthorized: true }\n                : { ...u, isAuthorized: false }\n        );\n        localStorage.setItem('moviPortal', JSON.stringify({ users: updatedUsers }));\n\n        const currentUser = { ...user, isAuthorized: true };\n        localStorage.setItem('current-user', JSON.stringify(currentUser));\n\n        setUser(user.login);\n        setFavoritesMoviesIds([])\n        setAuthorized(true);\n        setIsDisabled(true);\n        resetForm();\n        navigate('/home', { replace: true });\n    };\n\n    return (\n        <div className={!isDarkTheme ? styles.container : styles.containerDark}>\n            <h2>{isRegistered ? 'Login' : 'Register'}</h2>\n            <form onSubmit={handleSubmit} className={styles.form}>\n                <input\n                    disabled={isDisabled}\n                    type=\"text\"\n                    name=\"login\"\n                    placeholder={isDisabled ? 'The user is already authorized' : 'Login'}\n                    value={formData.login}\n                    onChange={handleInputChange}\n                    className={styles.input}\n                    required\n                />\n                <input\n                    disabled={isDisabled}\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder={isDisabled ? 'The user is already authorized' : 'Password'}\n                    value={formData.password}\n                    onChange={handleInputChange}\n                    className={styles.input}\n                    required\n                />\n                {!isRegistered && (\n                    <input\n                        type=\"password\"\n                        name=\"confirmPassword\"\n                        placeholder=\"Confirm Password\"\n                        value={formData.confirmPassword}\n                        onChange={handleInputChange}\n                        className={styles.input}\n                        required\n                    />\n                )}\n                {error && <p className={styles.formError}>{error}</p>}\n                <button\n                    type=\"submit\"\n                    className={styles.buttonLogReg}\n                    disabled={isDisabled}\n                >\n                    {isRegistered ? 'Login' : 'Register'}\n                </button>\n            </form>\n            <p className={styles.switchText}>\n                {isRegistered ? \"Don't have an account?\" : 'Already have an account?'}\n                <span\n                    className={styles.switchLink}\n                    onClick={() => {\n                        setIsRegistered((prev) => !prev);\n                        resetForm();\n                    }}\n                >\n                    {isRegistered ? ' Register' : ' Login'}\n                </span>\n            </p>\n        </div>\n    );\n};\n\nexport default Registration;","import styles from './index.module.css';\nimport Registartion from '../../Components/registration/Registration'\nimport { useUser } from '../../app/context';\n\nexport default function Login() {\n    const { isDarkTheme } = useUser()\n    return (\n        <div className={!isDarkTheme ? styles.loginPage : styles.loginPageDark}>\n            <Registartion />\n        </div >\n    )\n}"],"names":["Registration","navigate","useNavigate","setFavoritesMoviesIds","setUser","setAuthorized","isDarkTheme","useUser","isDisabled","setIsDisabled","useState","isRegistered","setIsRegistered","formData","setFormData","login","password","confirmPassword","error","setError","useEffect","savedUser","JSON","parse","localStorage","getItem","isAuthorized","replace","handleInputChange","e","name","value","target","prev","resetForm","_jsxs","className","styles","containerDark","container","children","_jsx","onSubmit","preventDefault","storedData","users","length","userExists","some","user","newUser","favoritesMoviesIds","push","setItem","stringify","find","u","updatedUsers","map","currentUser","form","disabled","type","placeholder","onChange","input","required","formError","buttonLogReg","switchText","switchLink","onClick","Login","loginPageDark","loginPage","Registartion"],"sourceRoot":""}